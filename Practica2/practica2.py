# -*- coding: utf-8 -*-
"""Practica2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aLhk5QIk6JWMky23aiJO4WNjyEFmjt4w

arbol.py
"""

class Nodo:
    def __init__(self, datos, hijos=None):
        self.datos = datos
        self.hijos = []
        self.padre = None
        self.coste = None
        self.set_hijos(hijos)

    def set_hijos(self, hijos):
        self.hijos = hijos
        if self.hijos != None:
            for h in self.hijos:
                h.padre = self

    def get_hijos(self):
        return self.hijos

    def get_padre(self):
        return self.padre

    def set_padre(self, padre):
        self.padre = padre

    def set_datos(self, datos):
        self.datos = datos

    def get_datos(self):
        return self.datos

    def set_coste(self, coste):
        self.coste = coste

    def get_coste(self):
        return self.coste

    def igual(self, nodo):
        if self.get_datos() == nodo.get_datos():
            return True
        else:
            return False

    def en_lista(self, lista_nodos):
        en_la_lista = False
        for n in lista_nodos:
            if self.igual(n):
                en_la_lista = True
        return en_la_lista

    def __str__(self):
        return str(self.get_datos())

"""puzzle-4py"""

# Puzle Lineal con búsqueda en profundidad

def buscar_solucion_DFS(estado_inicial, solucion):
    solucionado = False
    nodos_visitados = []
    nodos_frontera = []
    nodoInicial = Nodo(estado_inicial)
    nodos_frontera.append(nodoInicial)

    while (not solucionado) and len(nodos_frontera) != 0:
        nodo = nodos_frontera.pop()
        # extraer nodo y añadirlo a visitados
        nodos_visitados.append(nodo)

        if nodo.get_datos() == solucion:
            # solución encontrada
            solucionado = True
            return nodo
        else:
            # expandir nodos hijo
            dato_nodo = nodo.get_datos()
            # operador izquierdo
            hijo = [dato_nodo[1], dato_nodo[0], dato_nodo[2], dato_nodo[3]]
            hijo_izquierdo = Nodo(hijo)
            if not hijo_izquierdo.en_lista(nodos_visitados) \
                    and not hijo_izquierdo.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_izquierdo)
            # operador central
            hijo = [dato_nodo[0], dato_nodo[2], dato_nodo[1], dato_nodo[3]]
            hijo_central = Nodo(hijo)
            if not hijo_central.en_lista(nodos_visitados) \
                    and not hijo_central.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_central)
            # operador derecho
            hijo = [dato_nodo[0], dato_nodo[1], dato_nodo[3], dato_nodo[2]]
            hijo_derecho = Nodo(hijo)
            if not hijo_derecho.en_lista(nodos_visitados) \
                    and not hijo_derecho.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecho)


            nodo.set_hijos([hijo_izquierdo, hijo_central, hijo_derecho])



if __name__ == "__main__":
    estado_inicial=[4,2,3,1]
    solucion=[1,2,3,4]
    nodo_solucion = buscar_solucion_DFS(estado_inicial, solucion)
    # mostrar resultado
    resultado=[]
    nodo=nodo_solucion
    while nodo.get_padre() != None:
        resultado.append(nodo.get_datos())
        nodo = nodo.get_padre()

    resultado.append(estado_inicial)
    resultado.reverse()
    print(resultado)

"""Laberinto.py"""

def solve_maze(maze, start, end):
    stack = [start]
    while stack:
        x, y = stack[-1]

        # If reached the end point
        if (x, y) == end:
            return True, stack

        # Mark as visited
        maze[x][y] = '2'

        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            nx, ny = x + dx, y + dy

            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]):
                if maze[nx][ny] == '0' or maze[nx][ny] == 'E':
                    stack.append((nx, ny))
                    break
        else:
            stack.pop()

    return False, []


if __name__ == "__main__":
    # 0 = open path, 1 = wall, S = start, E = end
    maze = [
        ['1', '1', '1', '1', '1'],
        ['S', '0', '1', '0', '1'],
        ['1', '0', '1', '0', '1'],
        ['1', '0', '0', '0', 'E'],
        ['1', '1', '1', '1', '1']
    ]

    start = (1, 0)
    end = (3, 4)
    solved, path = solve_maze(maze, start, end)

    if solved:
        print("Maze Solved!")
        for x, y in path:
            if maze[x][y] != 'S' and maze[x][y] != 'E':
                maze[x][y] = '*'
        for row in maze:
            print("".join(row))
    else:
        print("No solution found.")

"""laberinto-modificado.py"""

import time

def solve_maze(maze, start, end):
    stack = [start]
    while stack:
        x, y = stack[-1]

        # If reached the end point
        if (x, y) == end:
            return True, stack

        # Mark as visited
        maze[x][y] = '2'

        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            nx, ny = x + dx, y + dy

            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]):
                if maze[nx][ny] == '0' or maze[nx][ny] == 'E':
                    stack.append((nx, ny))
                    break
        else:
            stack.pop()

    return False, []

def print_maze(maze):
    for row in maze:
        print("".join(row))

if __name__ == "__main__":
    # Modificación 1: Tamaño del laberinto
    maze_large = [
        ['1', '1', '1', '1', '1', '1', '1'],
        ['S', '0', '0', '0', '0', '0', '1'],
        ['1', '1', '1', '0', '1', '0', '1'],
        ['1', '0', '0', '0', '1', '0', '1'],
        ['1', '0', '1', '1', '1', '0', '1'],
        ['1', '0', '0', '0', '0', '0', 'E'],
        ['1', '1', '1', '1', '1', '1', '1']
    ]

    start = (1, 0)
    end = (5, 6)

    start_time = time.time()
    solved, path = solve_maze(maze_large, start, end)
    end_time = time.time()

    if solved:
        print("Maze Solved!")
        for x, y in path:
            if maze_large[x][y] != 'S' and maze_large[x][y] != 'E':
                maze_large[x][y] = '*'
        print_maze(maze_large)
    else:
        print("No solution found.")

    print("Time taken for large maze: {:.5f} seconds\n".format(end_time - start_time))

    # Modificación 2: Aumentar complejidad del laberinto
    maze_complex = [
        ['1', '1', '1', '1', '1', '1', '1'],
        ['S', '0', '1', '0', '0', '1', '1'],
        ['1', '0', '0', '0', '1', '0', '1'],
        ['1', '0', '1', '0', '1', '0', '1'],
        ['1', '0', '1', '1', '0', '0', '1'],
        ['1', '0', '0', '0', '0', '0', 'E'],
        ['1', '1', '1', '1', '1', '1', '1']
    ]

    end = (5, 6)

    start_time = time.time()
    solved, path = solve_maze(maze_complex, start, end)
    end_time = time.time()

    if solved:
        print("Maze Solved!")
        for x, y in path:
            if maze_complex[x][y] != 'S' and maze_complex[x][y] != 'E':
                maze_complex[x][y] = '*'
        print_maze(maze_complex)
    else:
        print("No solution found.")

    print("Time taken for complex maze: {:.5f} seconds\n".format(end_time - start_time))

    # Modificación 3: Laberinto sin solución
    maze_no_solution = [
        ['1', '1', '1', '1', '1'],
        ['S', '0', '1', '0', '1'],
        ['1', '0', '1', '0', '1'],
        ['1', '0', '1', '0', '1'],
        ['1', '1', '1', '1', 'E']
    ]

    end = (4, 4)

    start_time = time.time()
    solved, path = solve_maze(maze_no_solution, start, end)
    end_time = time.time()

    if solved:
        print("Maze Solved!")
        for x, y in path:
            if maze_no_solution[x][y] != 'S' and maze_no_solution[x][y] != 'E':
                maze_no_solution[x][y] = '*'
        print_maze(maze_no_solution)
    else:
        print("No solution found.")

    print("Time taken for unsolvable maze: {:.5f} seconds\n".format(end_time - start_time))